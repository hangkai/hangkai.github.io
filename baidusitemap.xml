<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">

    
  <url>
    <loc>www.lkh.im/2014/12/27/vi%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</loc>
    <lastmod>2014-12-27T07:52:04.000Z</lastmod>
    <data>
        <display>
        <title>vi基本操作</title>
        <pubTime>2014-12-27T07:42:37.000Z</pubTime>
        
        <tag>linux </tag>
         
        <tag>vi </tag>
         
         <content><![CDATA[<h3>vi有3个模式：插入模式、命令模式、低行模式。</h3>

<pre><code>插入模式：在此模式下可以输入字符，按ESC将回到命令模式。
命令模式：可以移动光标、删除字符等。
低行模式：可以保存文件、退出<span class="keyword">vi</span>、设置<span class="keyword">vi</span>、查找等功能(低行模式也可以看作是命令模式里的)。
</code></pre><h3>一、打开文件、保存、关闭文件(vi命令模式下使用)</h3>

<p>vi filename       //打开filename文件<br>:w       //保存文件<br>:w vpser.net        //保存至vpser.net文件<br>:q          //退出编辑器，如果文件已修改请使用下面的命令<br>:q!        //退出编辑器，且不保存<br>:wq         //退出编辑器，且保存文件</p>
<h3>二、插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)</h3>

<p>a      //在当前光标位置的右边添加文本<br>i       //在当前光标位置的左边添加文本<br>A     //在当前行的末尾位置添加文本<br>I      //在当前行的开始处添加文本(非空字符的行首)<br>O     //在当前行的上面新建一行<br>o     //在当前行的下面新建一行<br>R    //替换(覆盖)当前光标位置及后面的若干文本<br>J    //合并光标所在行及下一行为一行(依然在命令模式)</p>
<h3>三、移动光标(vi命令模式下使用)</h3>

<p>1、使用上下左右方向键</p>
<p>2、命令模式下：h   向左、j   向下 、k   向上、l  向右。<br>空格键 向右、Backspace  向左、Enter  移动到下一行首、-  移动到上一行首。</p>
<h3>四、删除、恢复字符或行(vi命令模式下使用)</h3>

<p>x         //删除当前字符<br>nx         //删除从光标开始的n个字符<br>dd      //删除当前行<br>ndd   //向下删除当前行在内的n行<br>u       //撤销上一步操作<br>U      //撤销对当前行的所有操作</p>
<h3>五、搜索(vi命令模式下使用)</h3>

<p>/vpser     //向光标下搜索vpser字符串<br>?vpser     //向光标上搜索vpser字符串<br>n           //向下搜索前一个搜素动作<br>N         //向上搜索前一个搜索动作</p>
<h3>六、跳至指定行(vi命令模式下使用)</h3>

<p>n+        //向下跳n行<br>n-         //向上跳n行<br>nG        //跳到行号为n的行<br>G           //跳至文件的底部</p>
<h3>七、设置行号(vi命令模式下使用)</h3>

<p>:set  nu     //显示行号<br>:set nonu    //取消显示行号</p>
<h3>八、复制、粘贴(vi命令模式下使用)</h3>

<p>yy    //将当前行复制到缓存区，也可以用 “ayy 复制，”a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。<br>nyy   //将当前行向下n行复制到缓冲区，也可以用 “anyy 复制，”a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。<br>yw    //复制从光标开始到词尾的字符。<br>nyw   //复制从光标开始的n个单词。<br>y^      //复制从光标到行首的内容。  VPS侦探<br>y$      //复制从光标到行尾的内容。<br>p        //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用”ap 进行粘贴。<br>P        //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用”aP 进行粘贴。</p>
<h3>九、替换(vi命令模式下使用)</h3>

<p>:s/old/new      //用new替换行中首次出现的old<br>:s/old/new/g         //用new替换行中所有的old<br>:n,m s/old/new/g     //用new替换从n到m行里所有的old<br>:%s/old/new/g      //用new替换当前文件里所有的old</p>
<h3>十、编辑其他文件</h3>

<p>:e otherfilename    //编辑文件名为otherfilename的文件。</p>
<h3>十一、修改文件格式</h3>

<p>:set fileformat=unix   //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。</p>
]]></content>
         
         
           
             
              <breadCrumb title="linux" url="www.lkh.im/categories/linux/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/20/virtualbox%E5%A4%8D%E5%88%B6centos%E8%99%9A%E6%8B%9F%E6%9C%BA/</loc>
    <lastmod>2014-12-27T06:14:36.000Z</lastmod>
    <data>
        <display>
        <title>virtualbox复制centos虚拟机</title>
        <pubTime>2014-12-20T06:30:47.000Z</pubTime>
        
        <tag>虚拟机 </tag>
         
        <tag>centos </tag>
         
         <content><![CDATA[<ol>
<li>右键选择选择已经装好的centos系统，点击复制，进去下图</li>
</ol>
<p>这里把名字取为centos 172.16.3.165 代表ip修改为165，并选择重新生成mac地址</p>
<p> <img src="/images/2014/12/20/6.jpeg" alt=""> </p>
<ol>
<li><p>选择完全复制</p>
<p><img src="/images/2014/12/20/7.jpeg" alt=""> </p>
</li>
</ol>
<p>复制完成后，启动centos 172.16.3.165 这台虚拟机</p>
<p>3.进去虚拟机，查看虚拟机的网络环境 输入ifconfig</p>
<p> <img src="/images/2014/12/20/8.jpeg" alt="">  </p>
<p>由上图看出目前的ip是155。需要注意的是，这里的mac地址是旧的虚拟机的地址，需要改成virtualbox分配的新mac地址，具体操作如下</p>
<p>4.把mac地址改成virtualbox分配的新的mac地址</p>
<p>先删除/etc/udev/rules.d/70-persistent-net.rules文件,重启后会自动生成</p>
<p>修改/etc/sysconfig/network-script/ifcfg-eth0</p>
<p>BOOTPROTO=static</p>
<p>ONBOOT=yes</p>
<p>TYPE=Ethernet</p>
<p>IPADDR=172.16.3.165      //虚拟机的ip</p>
<p>NETMASK=255.255.255.0  //子网掩码</p>
<p>GATEWAY=172.16.3.254   //网关</p>
<p>HWADDR=08：00：27：CC:E3：79  //MAC地址 </p>
<p> 这里是mac地址可以在右键(virtualbox的虚拟机—》设置—》网络)查询到</p>
<p>如下图红色部分：</p>
<p> <img src="/images/2014/12/20/9.jpeg" alt=""> </p>
<p>然后需要添加dns</p>
<p>vi /etc/resolv.conf</p>
<p>nameserver 202.96.128.86 </p>
<p>最后reboot</p>
]]></content>
         
         
           
             
              <breadCrumb title="运维" url="www.lkh.im/categories/%E8%BF%90%E7%BB%B4/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/20/ubuntu12-04-%E5%9C%A8virtualbox%E4%B8%8B%E6%A1%A5%E6%8E%A5-centos-%E8%99%9A%E6%8B%9F%E6%9C%BA/</loc>
    <lastmod>2014-12-27T06:14:05.000Z</lastmod>
    <data>
        <display>
        <title>ubuntu12.04 在virtualbox下桥接 centos 虚拟机</title>
        <pubTime>2014-12-20T06:08:06.000Z</pubTime>
        
        <tag>ubuntu </tag>
         
        <tag>linux </tag>
         
        <tag>centos </tag>
         
         <content><![CDATA[<h2 id="1-主机的网络环境">1.主机的网络环境</h2>
<p><img src="/images/2014/12/20/1.jpeg" alt=""> </p>
<h2 id="2-设置virualbox的网络连接方式">2.设置virualbox的网络连接方式</h2>
<p><img src="/images/2014/12/20/2.jpeg" alt=""><br>选择桥接网络，并选择eth0</p>
<h2 id="3-修改虚拟机的网络配置">3.修改虚拟机的网络配置</h2>
<p>修改/etc/sysconfig/network-script/ifcfg-eth0</p>
<p>BOOTPROTO=static</p>
<p>ONBOOT=yes</p>
<p>TYPE=Ethernet</p>
<p>IPADDR=172.16.3.166      //虚拟机的ip</p>
<p>NETMASK=255.255.255.0  //子网掩码</p>
<p>GATEWAY=172.16.3.254   //网关</p>
<p>然后需要添加dns</p>
<p>vi /etc/resolv.conf</p>
<p>nameserver 202.96.128.86 </p>
<p>重启网络</p>
<p>service network restart</p>
<p>再查看虚拟机的ip，eth0的ip已经变修改成更主机相同的网段<br><img src="/images/2014/12/20/3.jpeg" alt=""> </p>
<p>并ping通主机<br><img src="/images/2014/12/20/4.jpeg" alt=""> </p>
<p>再尝试通过主机shh到centos虚拟上<br><img src="/images/2014/12/20/5.jpeg" alt=""> </p>
<p>现在主机和虚拟机已经是通个网段上，并且连通了</p>
]]></content>
         
         
           
             
              <breadCrumb title="运维" url="www.lkh.im/categories/%E8%BF%90%E7%BB%B4/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/20/redis%E7%9A%845%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</loc>
    <lastmod>2014-12-27T06:13:44.000Z</lastmod>
    <data>
        <display>
        <title>redis的5种数据类型及基本操作</title>
        <pubTime>2014-12-20T06:36:17.000Z</pubTime>
        
        <tag>redis </tag>
         
        <tag>缓存 </tag>
         
        <tag>cache </tag>
         
         <content><![CDATA[<h2 id="Redis支持5种类型的数据类型">Redis支持5种类型的数据类型</h2>
<h1 id="1-字符串">1.字符串</h1>
<p>Redis字符串是字节序列。Redis字符串是二进制安全的，这意味着他们有一个已知的长度没有任何特殊字符终止，所以你可以存储任何东西，512兆为上限。</p>
<p>例子</p>
<pre><code><span class="input"><span class="prompt">redis 127.0.0.1:6379&gt;</span> <span class="constant">SET</span> name <span class="string">"hang"</span></span>
<span class="input"><span class="prompt">
OK

redis 127.0.0.1:6379&gt;</span> <span class="constant">GET</span> name</span>

<span class="string">"hang"</span>
</code></pre><h1 id="2-哈希">2.哈希</h1>
<p>Redis的哈希是键值对的集合。 Redis的哈希值是字符串字段和字符串值之间的映射，因此它们被用来表示对象</p>
<p>例子</p>
<pre><code><span class="input"><span class="prompt">redis 127.0.0.1:6379&gt;</span> <span class="constant">HMSET</span> <span class="symbol">user:</span><span class="number">1</span> username hang password hang points <span class="number">200</span></span>
<span class="input"><span class="prompt">
OK

redis 127.0.0.1:6379&gt;</span> <span class="constant">HGETALL</span> <span class="symbol">user:</span><span class="number">1</span></span>

<span class="number">1</span>) <span class="string">"username"</span>

<span class="number">2</span>) <span class="string">"hang"</span>

<span class="number">3</span>) <span class="string">"password"</span>

<span class="number">4</span>) <span class="string">"hang"</span>

<span class="number">5</span>) <span class="string">"points"</span>

<span class="number">6</span>) <span class="string">"200"</span>
</code></pre><p>在上面的例子中的哈希数据类型，用于存储其中包含的用户的基本信息用户的对象。这里HMSET，HEGTALL用户命令user:1是键。可以理解成user类id=1的实例</p>
<h1 id="3-列表">3.列表</h1>
<p>Redis的列表是简单的字符串列表，排序插入顺序。您可以添加元素到Redis的列表的头部或尾部。</p>
<p>例子</p>
<pre><code><span class="input"><span class="prompt">redis 127.0.0.1:6379&gt;</span> lpush tutoriallist redis</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> lpush tutoriallist mongodb</span>
<span class="input"><span class="prompt">
(integer) 2

redis 127.0.0.1:6379&gt;</span> lpush tutoriallist rabitmq</span>
<span class="input"><span class="prompt">
(integer) 3

redis 127.0.0.1:6379&gt;</span> lrange tutoriallist <span class="number">0</span> <span class="number">10</span></span>

<span class="number">1</span>) <span class="string">"rabitmq"</span>

<span class="number">2</span>) <span class="string">"mongodb"</span>

<span class="number">3</span>) <span class="string">"redis"</span>
</code></pre><p>列表的最大长度为 232 - 1 元素（4294967295，每个列表中可容纳超过4十亿的元素），改类型可以理解为java中的list集合</p>
<h1 id="4-集合">4.集合</h1>
<p>Redis的集合是字符串的无序集合。在Redis您可以添加，删除和测试文件是否存在，在成员O（1）的时间复杂度。</p>
<p>例子</p>
<pre><code><span class="input"><span class="prompt">redis 127.0.0.1:6379&gt;</span> sadd tutoriallist2 redis</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> sadd tutoriallist2 mongodb</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> sadd tutoriallist2 rabitmq</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> sadd tutoriallist2 rabitmq</span>
<span class="input"><span class="prompt">
(integer) 0

redis 127.0.0.1:6379&gt;</span> smembers tutoriallist2 </span>

<span class="number">1</span>) <span class="string">"rabitmq"</span>

<span class="number">2</span>) <span class="string">"mongodb"</span>

<span class="number">3</span>) <span class="string">"redis"</span>
</code></pre><p>注意：在上面的例子中rabitmq集合添加加两次，但由于集合元素具有唯一属性，该类型可以理解为java中的hashset集合</p>
<p>集合中的元素最大数量为 232 - 1 （4294967295，可容纳超过4十亿元素）。</p>
<h1 id="5-_Redis有序集">5. Redis有序集</h1>
<p>Redis的有序集合类似Redis的集合存储在设定值具有唯一性。不同的是，一个有序集合的每个成员用分数，以便采取有序set命令，从最小的到最大的分数有关。</p>
<p>在Redis的有序set添加，删除和测试存在成员O（1）（固定时间，无论里面包含集合元素的数量）。列表的最大长度为 232 - 1 个元素（每集合超过4294967295元素）。</p>
<p>例子</p>
<pre><code><span class="input"><span class="prompt">redis 127.0.0.1:6379&gt;</span> <span class="constant">ZADD</span> tutorials3 <span class="number">1</span> redis</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> <span class="constant">ZADD</span> tutorials3 <span class="number">2</span> mongodb</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> <span class="constant">ZADD</span> tutorials3 <span class="number">3</span> mysql</span>
<span class="input"><span class="prompt">
(integer) 1

redis 127.0.0.1:6379&gt;</span> <span class="constant">ZADD</span> tutorials3 <span class="number">3</span> mysql</span>
<span class="input"><span class="prompt">
(integer) 0

redis 127.0.0.1:6379&gt;</span> <span class="constant">ZADD</span> tutorials3 <span class="number">4</span> mysql</span>
<span class="input"><span class="prompt">
(integer) 0

redis 127.0.0.1:6379&gt;</span> <span class="constant">ZRANGE</span> tutorials3 <span class="number">0</span> <span class="number">10</span> <span class="constant">WITHSCORES</span></span>



<span class="number">1</span>) <span class="string">"redis"</span>

<span class="number">2</span>) <span class="string">"1"</span>

<span class="number">3</span>) <span class="string">"mongodb"</span>

<span class="number">4</span>) <span class="string">"2"</span>

<span class="number">5</span>) <span class="string">"mysql"</span>

<span class="number">6</span>) <span class="string">"4"</span>
</code></pre><p>在上述例子中的三个值被命令ZADD插入其得分在redis的有序集命名为tutorials3。最终打印出每个元素以及对应的下标。</p>
<p>也可以只遍历出集合的元素</p>
<pre><code><span class="input"><span class="prompt">redis 127.0.0.1:6379&gt;</span> <span class="constant">ZRANGEBYSCORE</span> tutoriallist3 <span class="number">0</span> <span class="number">1000</span></span>

<span class="number">1</span>) <span class="string">"redis"</span>

<span class="number">2</span>) <span class="string">"mongodb"</span>

<span class="number">3</span>) <span class="string">"rabitmq"</span>
</code></pre><p>该类型可以理解为java中的linkedhashset</p>
]]></content>
         
         
           
             
              <breadCrumb title="缓存" url="www.lkh.im/categories/%E7%BC%93%E5%AD%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/20/jdbcTemplate/</loc>
    <lastmod>2014-12-27T06:13:16.000Z</lastmod>
    <data>
        <display>
        <title>jdbcTemplate</title>
        <pubTime>2014-12-20T03:43:20.000Z</pubTime>
        
        <tag>java </tag>
         
        <tag>jdbcTemplate </tag>
         
         <content><![CDATA[<h1 id="Jdbctemplate_的基本使用">Jdbctemplate 的基本使用</h1>
<p>依赖：</p>
<pre><code><span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.0.5.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
<span class="comment">&lt;!-- jdbc driver --&gt;</span>
<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;<span class="title">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
</code></pre><p>建立数据库表：</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (
  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,
  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,
  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,
  <span class="string">`createDate`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,
  <span class="string">`modifyDate`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,
  <span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,
  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="string">`id`</span>)
) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">223</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span>
</code></pre><p>aplicationContext.xml的配置</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
<span class="attribute">xmlns:mvc</span>=<span class="value">"http://www.springframework.org/schema/mvc"</span>
<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
<span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span>
<span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span>
<span class="attribute">xmlns:tx</span>=<span class="value">"http://www.springframework.org/schema/tx"</span>
<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"</span>&gt;</span>
<span class="comment">&lt;!-- 扫描包 --&gt;</span>
<span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.hang.*"</span> /&gt;</span>
<span class="comment">&lt;!-- 配置jdbc --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"locations"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:jdbc.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 配置數據源 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.apache.commons.dbcp.BasicDataSource"</span>
<span class="attribute">destroy-method</span>=<span class="value">"close"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClassName"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.driver}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.url}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.username}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.password}"</span> /&gt;</span>
<span class="comment">&lt;!-- 连接池启动时的初始值 --&gt;</span>
<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialSize"</span> <span class="attribute">value</span>=<span class="value">"${initialSize}"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxActive"</span> <span class="attribute">value</span>=<span class="value">"${maxActive}"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxIdle"</span> <span class="attribute">value</span>=<span class="value">"${maxIdle}"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minIdle"</span> <span class="attribute">value</span>=<span class="value">"${minIdle}"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 配置jdbcTemplate模板 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jdbcTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 配置 transactionManager事物管理--&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- Spring AOP config配置切点 --&gt;</span>
<span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>
        <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">expression</span>=<span class="value">"execution(* com.hang.service.*.*(..))"</span> <span class="attribute">id</span>=<span class="value">"bussinessService"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">aop:advisor</span> <span class="attribute">advice-ref</span>=<span class="value">"txAdvice"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"bussinessService"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span>
<span class="comment">&lt;!-- 配置那个类那个方法用到事务处理 --&gt;</span>
<span class="tag">&lt;<span class="title">tx:advice</span> <span class="attribute">id</span>=<span class="value">"txAdvice"</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tx:attributes</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"get*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span>/&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"add*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span>/&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"update*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span>/&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"delete*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span>/&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span>/&gt;</span>
        <span class="tag">&lt;/<span class="title">tx:attributes</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tx:advice</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><p>Jdbc.properties</p>
<pre><code>jdbc.<span class="variable">driver=</span>com.mysql.jdbc.Driver
jdbc.<span class="variable">url=</span>jdbc:mysql://localhost:<span class="number">3306</span>/jdbcTemplate?<span class="variable">useUnicode=</span><span class="constant">true</span>&amp;amp;<span class="variable">characterEncoding=</span>UTF-<span class="number">8</span>
jdbc.<span class="variable">username=</span>root
jdbc.<span class="variable">password=</span><span class="variable">rootinitialSize=</span><span class="number">1</span>
<span class="variable">maxActive=</span><span class="number">500</span>
<span class="variable">maxIdle=</span><span class="number">2</span>
<span class="variable">minIdle=</span><span class="number">1</span>             
</code></pre><p>建立User对象</p>
<pre><code><span class="keyword">package</span> com.hang.entity;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{

   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;
   <span class="keyword">private</span> <span class="keyword">int</span> id;
   <span class="keyword">private</span> String password;
   <span class="keyword">private</span> String username;
   <span class="keyword">private</span> String createDate;
   <span class="keyword">private</span> String modifyDate;
   <span class="keyword">private</span> String type;
<span class="javadoc">/** 省略set get 方法**/</span>
}
</code></pre><p>建立JdbcTempBaseDao，用于获取 jdbcTemplate对象的公共类</p>
<pre><code><span class="keyword">package</span> com.hang.dao.base;
<span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;
<span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;
<span class="keyword">import</span> javax.annotation.PostConstruct;
<span class="keyword">import</span> javax.annotation.Resource;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTempBaseDao</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> </span>{

   <span class="javadoc">/**
    */</span>
<span class="annotation">@Resource</span>(name = <span class="string">"jdbcTemplate"</span>)
   <span class="keyword">public</span> JdbcTemplate jdbcTemplate;
<span class="annotation">@PostConstruct</span>  
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initSqlMapClient</span>() {  
         <span class="keyword">super</span>.setJdbcTemplate(jdbcTemplate);
} 
}
</code></pre><p>建立IUserDao接口，对userDao的基本操作</p>
<pre><code><span class="keyword">package</span> com.hang.dao;
<span class="keyword">import</span> com.hang.entity.User;
<span class="keyword">import</span> java.util.List;
<span class="keyword">import</span> java.util.Map;
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>{
   <span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span>();
   <span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserLists</span>(Map&lt;String, Object&gt; map);
   <span class="keyword">public</span> Integer <span class="title">getUserCount</span>(Map&lt;String, Object&gt; map);
   <span class="keyword">public</span> User <span class="title">getUserById</span>(Integer primaryKeyId);
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUserById</span>(Integer primaryKeyId);
   <span class="keyword">public</span> User <span class="title">addUser</span>(User entity);
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editUser</span>(User entity);
}
</code></pre><p>IUserDao 的实现</p>
<pre><code><span class="keyword">package</span> com.hang.dao.impl;
<span class="keyword">import</span> com.hang.dao.IUserDao;
<span class="keyword">import</span> com.hang.dao.base.JdbcTempBaseDao;
<span class="keyword">import</span> com.hang.entity.User;
<span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;
<span class="keyword">import</span> org.springframework.jdbc.core.PreparedStatementCreator;
<span class="keyword">import</span> org.springframework.jdbc.core.RowCallbackHandler;
<span class="keyword">import</span> org.springframework.jdbc.support.GeneratedKeyHolder;
<span class="keyword">import</span> org.springframework.stereotype.Repository;
<span class="keyword">import</span> java.sql.Connection;
<span class="keyword">import</span> java.sql.PreparedStatement;
<span class="keyword">import</span> java.sql.ResultSet;
<span class="keyword">import</span> java.sql.SQLException;
<span class="keyword">import</span> java.util.ArrayList;
<span class="keyword">import</span> java.util.List;
<span class="keyword">import</span> java.util.Map;
<span class="annotation">@Repository</span>
<span class="annotation">@SuppressWarnings</span>(<span class="string">"all"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcTempBaseDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>{

   <span class="annotation">@Override</span>
<span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span>() {
      String sql=<span class="string">"select * from user "</span>;
      <span class="keyword">final</span> List&lt;User&gt;  list= <span class="keyword">new</span> ArrayList&lt;User&gt;();
jdbcTemplate.query(sql, <span class="keyword">new</span> RowCallbackHandler(){
         <span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRow</span>(ResultSet rs) <span class="keyword">throws</span> SQLException {
            User u=<span class="keyword">new</span> User();
u.setId(rs.getInt(<span class="string">"id"</span>));
u.setUsername(rs.getString(<span class="string">"username"</span>));
u.setPassword(rs.getString(<span class="string">"password"</span>));
u.setCreateDate(rs.getString(<span class="string">"createDate"</span>));
u.setModifyDate(rs.getString(<span class="string">"modifyDate"</span>));
u.setType(rs.getString(<span class="string">"type"</span>));
list.add(u);
}
      });
      <span class="keyword">return</span> list;
}

   <span class="annotation">@Override</span>
<span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserLists</span>(Map&lt;String, Object&gt; map) {
      <span class="keyword">return</span> <span class="keyword">null</span>;
}

   <span class="annotation">@Override</span>
<span class="keyword">public</span> Integer <span class="title">getUserCount</span>(Map&lt;String, Object&gt; map) {
       String sql = <span class="string">"select count(1) from User where id=? "</span>;
        <span class="keyword">return</span> getJdbcTemplate().queryForObject(sql, Integer.class,map);
}

   <span class="annotation">@Override</span>
<span class="keyword">public</span> User <span class="title">getUserById</span>(Integer primaryKeyId) {
      String sql = <span class="string">"select id,username, password, createDate, modifyDate,type from User where id=?"</span>;
List&lt;User&gt; userList = getJdbcTemplate().query(sql, <span class="keyword">new</span> BeanPropertyRowMapper(User.class), primaryKeyId);
        <span class="keyword">if</span>(userList.size() == <span class="number">0</span>) {
            <span class="keyword">return</span> <span class="keyword">null</span>;
}
        <span class="keyword">return</span> userList.get(<span class="number">0</span>);
}

   <span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUserById</span>(Integer primaryKeyId) {
       String sql = <span class="string">"delete from user where id=?"</span>;
getJdbcTemplate().update(sql, primaryKeyId);
}

   <span class="annotation">@Override</span>
<span class="keyword">public</span> User <span class="title">addUser</span>(<span class="keyword">final</span> User entity) {
      <span class="keyword">final</span> String sql = <span class="string">"insert into User(username, password, createDate, modifyDate,type) values(?,?,?,?,?)"</span>;
GeneratedKeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();
getJdbcTemplate().update(<span class="keyword">new</span> PreparedStatementCreator() {
            <span class="annotation">@Override</span>
<span class="keyword">public</span> PreparedStatement <span class="title">createPreparedStatement</span>(Connection connection) <span class="keyword">throws</span> SQLException {
                PreparedStatement psst = connection.prepareStatement(sql, <span class="keyword">new</span> String[]{<span class="string">"id"</span>});
psst.setString(<span class="number">1</span>, entity.getUsername());
psst.setString(<span class="number">2</span>, entity.getPassword());
psst.setString(<span class="number">3</span>, entity.getCreateDate());
psst.setString(<span class="number">4</span>, entity.getModifyDate());
psst.setString(<span class="number">5</span>, entity.getType());
                <span class="keyword">return</span> psst;
}
        }, keyHolder);
entity.setId(keyHolder.getKey().intValue());
        <span class="keyword">return</span> entity;
}

   <span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editUser</span>(User entity) {
      String sql=<span class="string">"update user set username=?,password=?"</span>;
jdbcTemplate.update(sql, User.class,entity);
} 
}
</code></pre><p>UserDaoTest，对userdao的测试</p>
<pre><code><span class="keyword">import</span> com.hang.dao.IUserDao;
<span class="keyword">import</span> com.hang.entity.User;
<span class="keyword">import</span> org.junit.BeforeClass;
<span class="keyword">import</span> org.junit.Test;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;
<span class="keyword">import</span> java.util.List;
<span class="javadoc">/**
 * Created with IntelliJ IDEA.
 * User: hang
 * Date: 14-12-18
 * Time: 上午11:44
 * To change this template use File | Settings | File Templates.
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span></span>{

    <span class="keyword">private</span> <span class="keyword">static</span> IUserDao userDao;
<span class="annotation">@BeforeClass</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUpBeforeClass</span>() {
        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"aplicationContext.xml"</span>);
userDao = (IUserDao) applicationContext.getBean(<span class="string">"userDaoImpl"</span>);
}

    <span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList</span>(){
        List&lt;User&gt; users = userDao.getUserList();
System.out.println(users.size());
}
}
</code></pre>]]></content>
         
         
           
             
              <breadCrumb title="java" url="www.lkh.im/categories/java/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/20/centos6%E4%B8%8B%E5%AE%89%E8%A3%85redis/</loc>
    <lastmod>2014-12-27T06:12:53.000Z</lastmod>
    <data>
        <display>
        <title>centos6下安装redis</title>
        <pubTime>2014-12-20T06:46:11.000Z</pubTime>
        
        <tag>redis </tag>
         
        <tag>centos </tag>
         
        <tag>cache </tag>
         
         <content><![CDATA[<p>安装ridis前，先安装gcc和tcl</p>
<p>gcc的安装:</p>
<pre><code><span class="comment">yum</span> <span class="comment">install</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span>
</code></pre><p>tcl的安装:</p>
<pre><code>yum install -<span class="keyword">y</span> <span class="keyword">tcl</span>
</code></pre><p>安装完成后，开始安装redis，先下载redis的源码并编译</p>
<pre><code><span class="title">wget</span> <span class="url">http://download.redis.io/redis-stable.tar.gz</span>

tar xvzf redis-stable.tar.gz

cd redis-stable

make
</code></pre><p>在make成功以后，会在src目录下多出一些可执行文件：redis-server，redis-cli等等。</p>
<p>方便期间用cp命令复制到usr目录下运行。</p>
<pre><code>cp redis-server <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>

cp redis-cli <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>
</code></pre><p>然后新建目录，存放配置文件</p>
<pre><code><span class="built_in">mkdir</span> /etc/redis

<span class="built_in">mkdir</span> /var/redis

<span class="built_in">mkdir</span> /var/redis/<span class="built_in">log</span>

<span class="built_in">mkdir</span> /var/redis/run

<span class="built_in">mkdir</span> /var/redis/<span class="number">6379</span>
</code></pre><p>在redis解压根目录中找到配置文件模板，复制到如下位置。</p>
<pre><code><span class="keyword">cp</span> redis.<span class="keyword">conf</span> /etc/redis/<span class="number">6379</span>.<span class="keyword">conf</span>
</code></pre><p>通过vim命令修改 /etc/redis/6379.conf</p>
<pre><code>    daemonize yes

    pidfile <span class="regexp">/var/</span>redis<span class="regexp">/run/</span>redis_6379.pid

    logfile <span class="regexp">/var/</span>redis<span class="regexp">/log/</span>redis_6379.log

    dir <span class="regexp">/var/</span>redis<span class="regexp">/6379</span>
</code></pre><p>最后运行redis：       </p>
<pre><code>$ redis-server /etc/redis/<span class="number">6379</span>.<span class="keyword">conf</span> 
</code></pre><p>检查Redis是否在工作？</p>
<pre><code><span class="variable">$redis</span>-cli
</code></pre><p>这将打开一个Redis提示，如下所示：</p>
<pre><code><span class="title">redis</span> <span class="number">127.0.0.1:6379</span>&gt;
</code></pre><p>上面的提示127.0.0.1是本机的IP地址，6379为Redis服务器运行的端口。<br>现在输入PING命令，如下所示。</p>
<pre><code>    <span class="title">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ping
    PONG
</code></pre><p>这说明你已经成功安装redis。</p>
<p>参考:   <a href="http://www.cnblogs.com/haoxinyue/p/3620648.html" target="_blank" rel="external">http://www.cnblogs.com/haoxinyue/p/3620648.html</a></p>
]]></content>
         
         
           
             
              <breadCrumb title="缓存" url="www.lkh.im/categories/%E7%BC%93%E5%AD%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/27/LVS-%E4%B8%89%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E3%80%81%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83/</loc>
    <lastmod>2014-12-27T06:10:07.000Z</lastmod>
    <data>
        <display>
        <title>LVS 三种工作模式原理、以及优缺点比较</title>
        <pubTime>2014-12-27T06:05:34.000Z</pubTime>
        
        <tag>linux </tag>
         
        <tag>lvs </tag>
         
         <content><![CDATA[<h1 id="一、NAT模式（VS-NAT）">一、NAT模式（VS-NAT）</h1>
<p>原理：</p>
<p>就是把客户端发来的数据包的IP头的目的地址，在负载均衡器上换成其中一台RS 的IP地址，并发至此RS来处理,RS处理完成后把数据交给经过负载均衡器,负载均衡器再把数据包的原IP地址改为自己的IP，将目的地址改为客户端IP 地址即可｡期间,无论是进来的流量,还是出去的流量,都必须经过负载均衡器｡</p>
<p>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，只有负载均衡器需要一个合法的IP地址。</p>
<p>缺点：扩展性有限。当服务器节点（普通PC服务器）增长过多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包的流向都经过负载均衡器。当服务器节点过多时，大量的数据包都交汇在负载均衡器那，速度就会变慢！</p>
<h1 id="二、IP隧道模式（VS-TUN）">二、IP隧道模式（VS-TUN）</h1>
<p>原理：</p>
<p>首先要知道，互联网上的大多Internet服务的请求包很短小，而应答包通常很大。那么隧道模式就是，把客户端发来的数据包，封装一个新的IP头标记(仅目的IP)发给RS,RS收到后,先把数据包的头解开,还原数据包,处理后,直接返回给客户端,不需要再经过负载均衡器｡注意,由于RS需要对负载均衡器 发过来的数据包进行还原,所以说必须支持IPTUNNEL协议｡所以,在RS的内核中,必须编译支持IPTUNNEL这个选项</p>
<p>优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，就能处理很巨大的请求量，这种方式，一台负载均衡器能够为很多RS进行分发。而且跑在公网上就能进行不同地域的分发。</p>
<p>缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，服务器可能只局限在部分Linux系统上。</p>
<h1 id="三、直接路由模式（VS-DR）">三、直接路由模式（VS-DR）</h1>
<p>原理：</p>
<p>负载均衡器和RS都使用同一个IP对外服务｡但只有DR对ARP请求进行响应,所有RS对本身这个IP的ARP请求保持静默｡也就是说,网关会把对这个服务 IP的请求全部定向给DR,而DR收到数据包后根据调度算法,找出对应的RS,把目的MAC地址改为RS的MAC（因为IP一致）并将请求分发给这台 RS｡这时RS收到这个数据包,处理完成之后，由于IP一致，可以直接将数据返给客户，则等于直接从客户端收到这个数据包无异,处理后直接返回给客户端｡ 由于负载均衡器要对二层包头进行改换,所以负载均衡器和RS之间必须在一个广播域,也可以简单的理解为在同一台交换机上｡</p>
<p>优点：和TUN（隧道模式）一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器。</p>
<p>缺点：（不能说缺点，只能说是不足）要求负载均衡器的网卡必须与物理网卡在一个物理段上。</p>
]]></content>
         
         
           
             
              <breadCrumb title="运维" url="www.lkh.im/categories/%E8%BF%90%E7%BB%B4/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>www.lkh.im/2014/12/20/hello-world/</loc>
    <lastmod>2014-12-19T08:15:22.000Z</lastmod>
    <data>
        <display>
        <title>Hello World</title>
        <pubTime>2014-12-20T05:59:31.000Z</pubTime>
        
         <content><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
         
         
           
        </display>
    </data>
    </url>

</urlset>
